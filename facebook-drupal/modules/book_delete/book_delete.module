<?php
// $Id: book_delete.module,v 1.1.2.1 2009/01/26 20:35:56 lynn Exp $

/**
 * @file
 * Adds book deletion ability to the book administration page (admin/content/book).
 */
 
/**
 * Implementation of hook_menu().
 */
function book_delete_menu() {
  $items['admin/content/book/delete/%node'] = array(
    'title' => 'Delete Book',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('book_delete_delete_confirm', 4),
    'access callback' => '_book_delete_access',
    'type' => MENU_CALLBACK,  
  );
  return $items;
}

/**
 * Menu access callback.
 */
function _book_delete_access() {
  if (user_access('administer book outlines')) {
    if (user_access('administer nodes') || user_access('delete any book content')) {
      return true;
    }
  }
  return false;
}

/**
 * Implementation of hook_menu_alter().
 */
function book_delete_menu_alter(&$callbacks) {
  // Override the book admin page with a custom version that includes book deletion links.
  $callbacks['admin/content/book']['page callback'] = 'book_delete_book_admin_overview';
}

/**
 * Menu callback.  Overrides the book_admin_overview at admin/content/book.
 *
 * @see book_delete_menu_alter()
 * @see book_admin_overview()
 */
function book_delete_book_admin_overview() {
  // Users must have access to delete all book nodes in order to safely delete a book.
  if (user_access('administer nodes') || user_access('delete any book content')) {
    $rows = array();
    
    foreach (book_get_books() as $book) {
      $rows[] = array(l($book['title'], $book['href'], $book['options']), l(t('edit order and titles'), "admin/content/book/". $book['nid']), l(t('delete book'), 'admin/content/book/delete/'. $book['nid']));
    }
    $headers = array(t('Book'), t('Edit'), t('Delete'));

    return theme('table', $headers, $rows);
  }
  else { // The user may not have access to delete all book nodes.  Show them the generic book admin page.
    include_once('./'. drupal_get_path('module', 'book') .'/book.admin.inc');
    return book_admin_overview();
  }
}

/**
 * Menu callback.  Ask for confirmation of book deletion.
 */
function book_delete_delete_confirm(&$form_state, $node) {
  $form['bid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  return confirm_form($form,
    t('Are you sure you want to delete the entire book %title?', array('%title' => $node->title)),
    isset($_GET['destination']) ? $_GET['destination'] : 'admin/content/book',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Execute full book deletion using batch processing.
 */
function book_delete_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $bid = $form_state['values']['bid'];
    $batch = array(
     'title' => t('Deleting book'),
     'operations' => array(
        array('book_delete_delete', array($bid)),
      ),
     'finished' => '_book_delete_delete_finished',
    );
    batch_set($batch);
    batch_process();
  }
}

/**
 * Batch processing callback.  Delete an entire book 5 nodes at a time.
 */
function book_delete_delete($bid, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['max'] = db_result(db_query("SELECT COUNT(nid) FROM {book} WHERE bid = %d", $bid));
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['highest_nid'] = 0;
    $context['sandbox']['bid'] = $bid;
  }
  
  // Delete 5 nodes at a time.
  $result = db_query_range("SELECT nid FROM {book} WHERE bid = %d AND nid > %d AND nid <> %d ORDER BY nid ASC", $context['sandbox']['bid'], $context['sandbox']['highest_nid'], $context['sandbox']['bid'], 0, 5);
  while ($nid = db_result($result)) {
    node_delete($nid);
    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['highest_nid'] = $nid;
  }
  
  // Delete the top book node last.
  if ($context['sandbox']['progress'] == $context['sandbox']['max'] - 1) {
    node_delete($context['sandbox']['bid']);
    $context['sandbox']['progress']++;
  }

  // Multistep processing : report progress.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Book delete batch 'finished' callback.
 */
function _book_delete_delete_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The book has been deleted.'));
  }
  else {
    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
    $message = format_plural(count($results), '1 item successfully deleted:', '@count items successfully deleted:');
    $message .= theme('item_list', $results);
    drupal_set_message($message);
  }
  drupal_goto('admin/content/book');
}
