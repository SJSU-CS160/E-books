<?php

/**
 * @file
 * Tax tests.
 */

/**
 * Tests the inclusive taxes functionality.
 */
class UbercartInclusiveTaxesTestCase extends UbercartTestHelper {

  public static function getInfo() {
    return array(
      'name' => 'Inclusive taxes',
      'description' => 'Ensures that inclusive taxes are calculated and displayed correctly.',
      'group' => 'Ubercart',
    );
  }

  function setUp() {
    $modules = array('uc_product_kit', 'uc_attribute', 'uc_taxes');
    $permissions = array();
    parent::setUp($modules, $permissions);
  }

  function testProductKitAttributes() {
    $this->drupalLogin($this->adminUser);

    // Create a 20% inclusive tax rate.
    $rate = (object) array(
      'id' => 0, // TODO: should not have to set this
      'name' => $this->randomName(8),
      'rate' => 0.2,
      'taxed_product_types' => array('product'),
      'taxed_line_items' => array(),
      'weight' => 0,
      'shippable' => 0,
      'display_include' => 1,
      'inclusion_text' => '',
    );
    uc_taxes_rate_save($rate);

    // Create a $10 product.
    $product = $this->createProduct(array(
      'sell_price' => 10,
    ));

    // Create an attribute.
    $attribute = (object) array(
      'name' => $this->randomName(8),
      'label' => $this->randomName(8),
      'description' => $this->randomName(8),
      'required' => TRUE,
      'display' => 1,
      'ordering' => 0,
    );
    uc_attribute_save($attribute);

    // Create an option with a price adjustment of $5.
    $option = (object) array(
      'aid' => $attribute->aid,
      'name' => $this->randomName(8),
      'cost' => 0,
      'price' => 5,
      'weight' => 0,
      'ordering' => 0,
    );
    uc_attribute_option_save($option);

    // Attach the attribute to the product.
    $attribute = uc_attribute_load($attribute->aid);
    uc_attribute_subject_save($attribute, 'product', $product->nid, TRUE);

    // Create a product kit containing the product.
    $kit = $this->drupalCreateNode(array(
      'type' => 'product_kit',
      'products' => array($product->nid),
      'ordering' => 0,
      'mutable' => UC_PRODUCT_KIT_UNMUTABLE_WITH_LIST,
    ));

    // Set the kit total to $9 to automatically apply a discount.
    $kit = node_load($kit->nid);
    $kit->kit_total = 9;
    node_save($kit);
    $kit = node_load($kit->nid);
    $this->assertEqual($kit->products[$product->nid]->discount, -1, 'Product kit component has correct discount applied.');

    // Add the product kit to the cart, selecting the option.
    $attribute_key = 'products[' . $product->nid . '][attributes][' . $attribute->aid . ']';
    $this->drupalPost('node/' . $kit->nid, array($attribute_key => $option->oid), t('Add to cart'));

    // Check that the subtotal is $16.80 ($10 base + $5 option - $1 discount, with 20% tax)
    $this->drupalGet('cart');
    $this->assertText('Subtotal: $16.80', 'Order subtotal is correct.');
  }
}
